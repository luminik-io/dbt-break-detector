[build-system]
requires = ["setuptools>=45", "wheel", "build>=0.7.0"]
build-backend = "setuptools.build_meta"

[project]
name = "dbt-break-detector"
version = "0.1.0"
description = "A tool to detect breaking changes in dbt projects"
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"}
]
keywords = ["dbt", "data", "analytics", "sql", "breaking-changes"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Build Tools",
    "Topic :: Database",
    "Topic :: Software Development :: Testing",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    "dbt-core>=1.5.0",
    "networkx>=2.8.0",
    "pyyaml>=6.0",
    "gitpython>=3.1.0",
    "click>=8.0.0",
    "sqlparse>=0.4.0",
    "typing-extensions>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
    "pre-commit>=2.20.0",
    "pytest>=7.0.0",
    "pytest-cov>=3.0.0",
    "tox>=3.24.0",
    "bump2version>=1.0.0",
]

docs = [
    "mkdocs>=1.3.0",
    "mkdocs-material>=8.3.0",
    "mkdocstrings[python]>=0.19.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/dbt-break-detector"
Documentation = "https://yourusername.github.io/dbt-break-detector"
Repository = "https://github.com/yourusername/dbt-break-detector.git"
Changelog = "https://github.com/yourusername/dbt-break-detector/blob/main/CHANGELOG.md"
Issues = "https://github.com/yourusername/dbt-break-detector/issues"

[project.scripts]
dbt-break-detector = "src.cli:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["src*"]
exclude = ["tests*"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
^/tests/fixtures/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 88
skip = ["tests/fixtures"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "networkx.*",
    "sqlparse.*",
    "git.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=src --cov-report=term-missing"
testpaths = [
    "tests",
]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
branch = true
source = ["src"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
ignore_errors = true
omit = [
    "tests/*",
    "setup.py",
]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38, py39, py310, py311, lint, type
isolated_build = True

[testenv]
deps =
    -r{toxinidir}/requirements/test.txt
commands =
    pytest {posargs:tests}

[testenv:lint]
deps =
    black>=22.0.0
    flake8>=4.0.0
    isort>=5.10.0
commands =
    black .
    flake8 .
    isort .

[testenv:type]
deps =
    mypy>=0.950
commands =
    mypy src/src
"""

[tool.bumpversion]
current_version = "0.1.0"
commit = true
tag = true
parse = """(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"""
serialize = ["{major}.{minor}.{patch}"]

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = "version = \"{current_version}\""
replace = "version = \"{new_version}\""

[build-system.optional-dependencies]
test = ["pytest>=7.0.0", "coverage>=6.4.0"]